// Importa√ß√µes necess√°rias do Angular
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms'; // Importando FormsModule para usar ngForm
import { SellerService } from '../../services/seller.service'; // Importa√ß√£o do servi√ßo que lida com autentica√ß√£o de vendedores
import { HttpClientModule } from '@angular/common/http'; // Importa√ß√£o para realizar requisi√ß√µes HTTP
import { Router } from '@angular/router';
import { SignUp } from '../data.types'; // Importa√ß√£o da interface que define os dados de cadastro/login

@Component({
  selector: 'app-seller-auth', // Nome do seletor para chamar esse componente no HTML
  standalone: true, // Define que o componente pode ser usado independentemente de um m√≥dulo
  imports: [CommonModule, FormsModule, HttpClientModule], // M√≥dulos necess√°rios para manipula√ß√£o do formul√°rio e requisi√ß√µes HTTP
  templateUrl: './seller-auth.component.html', // Arquivo HTML associado ao componente
  styleUrls: ['./seller-auth.component.css'], // Arquivo CSS associado ao componente
})
export class SellerAuthComponent implements OnInit {
  showLogin = false; // Controla qual formul√°rio ser√° exibido (cadastro ou login)
  authError: String = ''; // Armazena mensagens de erro de autentica√ß√£o

  constructor(private seller: SellerService, private router: Router) {}

  // M√©todo do ciclo de vida chamado quando o componente √© inicializado
  ngOnInit(): void {
    this.seller.reloadSeller(); // Verifica se o usu√°rio j√° est√° logado e redireciona caso positivo
  }

  // Fun√ß√£o chamada quando o usu√°rio preenche o formul√°rio de cadastro e clica no bot√£o "Cadastrar"
  signUp(data: SignUp): void {
    this.seller.userSignUp(data); // Chama o servi√ßo para cadastrar o vendedor
  }

  // Fun√ß√£o chamada quando o usu√°rio preenche o formul√°rio de login e clica no bot√£o "Login"
  login(data: SignUp): void {
    this.seller.userLogin(data); // Chama o servi√ßo para autenticar o vendedor

    // Se houver erro no login, exibe a mensagem na tela
    this.seller.isLoginError.subscribe((isError) => {
      if (isError) {
        this.authError = 'Email ou senha n√£o correspondem';
      }
    });
  }

  // Alterna para o formul√°rio de login
  openLogin() {
    this.showLogin = true;
  }

  // Alterna para o formul√°rio de cadastro
  openSignUp() {
    this.showLogin = false;
  }
}

/*
üîé O que esse c√≥digo faz?
Gerencia a autentica√ß√£o do vendedor, permitindo que ele se cadastre ou fa√ßa login.
Controla qual formul√°rio ser√° exibido (showLogin ‚Üí true mostra o login, false mostra o cadastro).
Faz requisi√ß√µes HTTP para cadastrar ou autenticar o vendedor atrav√©s do SellerService.
Redireciona o usu√°rio se ele j√° estiver logado, chamando reloadSeller() no ngOnInit().
Exibe mensagens de erro caso o login falhe (authError).
üõ† Poss√≠veis melhorias
Evitar m√∫ltiplas assinaturas no subscribe()
O subscribe() dentro de login() pode gerar m√∫ltiplas execu√ß√µes indesejadas.
Melhor usar o BehaviorSubject de outra forma ou um async pipe no template.

Validar os campos antes de enviar os dados
Atualmente, n√£o h√° valida√ß√£o nos campos.
Podemos adicionar valida√ß√£o usando Validators do Angular Forms.
*/
